//kruskals algorithm 
//Time complexity O(ElogE) E-total number of edges
//space complexity O(V)
#include<iostream>
#include<bits/stdc++.h>
using namespace std;
struct node{
	int u;
	int v;
	int wt;
	node(int first,int second,int weight)
	{
		u=first;
		v=second;
		wt=weight;
	}
};

bool comp(node a,node b)
{
	return a.wt<b.wt;
}

int findPar(int u,vector<int>& parent)
{
	if(parent[u]==u)
	return u;
	return parent[u]=findPar(parent[u],parent);
}

void Union(int u,int v,vector<int>& parent,vector<int>& rank)
{
	u=findPar(u,parent);
	v=findPar(v,parent);
	if(rank[u]<rank[v])
	{
		parent[u]=v;
	}
	else if(rank[u]>rank[v])
	{
		parent[v]=u;
	}
	else
	{
		parent[v]=u;
		rank[u]++;
	}
	
}

int main()
{
	int n,m;
	cout<<"Enter the number of vertices and number of edges"<<"\n";
	cin>>n>>m;
	vector<node> edges;
	int i;
	cout<<"Enter the all edges and their adjacent vertices and weight"<<"\n";
	for(i=0;i<m;i++)
	{
		int u,v,wt;
		cin>>u>>v>>wt;
		edges.push_back(node(u,v,wt));
	}
	
	vector<int> parent;
	for(i=0;i<n;i++)
	{
		parent.push_back(i);
	}
	for(i=0;i<n;i++)
	parent[i]=i;
	
	vector<int> rank(n);
	sort(edges.begin(),edges.end(),comp);
	for(i=0;i<n;i++)
	rank[i]=0;
	
	int res=0;
	
	vector<pair<int,int> > mst;
	
	for(i=0;i<m;i++)
	{
		if(findPar(edges[i].u,parent)!=findPar(edges[i].v,parent))
		{
			res+=edges[i].wt;
			Union(edges[i].u,edges[i].v,parent,rank);
			mst.push_back(make_pair(edges[i].u,edges[i].v));
		}
	}
	cout<<res<<"\n";
	
	for(i=0;i<mst.size();i++)
	{
		cout<<mst[i].first<<" "<<mst[i].second<<"\n";
	}
}
