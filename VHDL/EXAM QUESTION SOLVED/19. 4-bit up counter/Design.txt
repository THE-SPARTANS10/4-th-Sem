-- Code your design here
library IEEE;
use IEEE.std_logic_1164.all;

entity JK_FF is 
port(
 J,K,clock,rst: in std_logic;
    q: out std_logic);
end JK_FF;
architecture behavioral of JK_FF is
begin
 process(J,K,clock,rst)
    begin
     if(rst='1') then q<='0';
     elsif(clock' event and clock='1') then 
         if(J='1' and K='0') then q<='1';
            elsif(J='0' and K='1') then q<='0';
            elsif(J='1' and K='1') then q<=(not q);
            end if;
         end if;
    end process;
end behavioral;
-- Code your design here
library IEEE;
use IEEE.std_logic_1164.all;
entity sync_counter is
port(
 cl,vcc,rt:in std_logic;
    q0,q1,q2,q3:out std_logic);
end sync_counter;

architecture structural of sync_counter is
component JK_FF is
port(
 J,K,clock,rst: in std_logic;
    q: out std_logic);
end component;
begin
    ff1:JK_FF port map(vcc,vcc,cl,rt,q0);
    ff2:JK_FF port map(vcc,vcc,not q0,rt,q1);
    ff3:JK_FF port map(vcc,vcc,not  q1,rt,q2);
    ff4:JK_FF port map(vcc,vcc,not  q2,rt,q3);
end structural;