-- Code your design here
library IEEE;
use IEEE.std_logic_1164.all;
entity jk_ff is
port(j,k,clk,reset:in std_logic;
                 q:out std_logic);
end jk_ff;
architecture behavioral of jk_ff is
-- signal s:std_logic;
begin
process(clk,reset)
begin
-- s<='0';
if(reset='1')then
q<='0';
elsif(clk'event and clk='1')then
    if(j='0' and k='0')then
    q<=q;
    elsif(j='0' and k='1')then
    q<='0';
    elsif(j='1' and k='0')then
    q<='1';
    elsif(j='1' and k='1')then
    q<=not q;
    end if;
end if;
-- q<=s;
end process;
end behavioral;

-- Code your design here
library IEEE;
use IEEE.std_logic_1164.all;

entity sync_counter is
port(
 cl,vcc,rt:in std_logic;
    q0,q1,q2:out std_logic);
end sync_counter;

architecture structural of sync_counter is
component jk_ff is
port(j,k,clk,reset:in std_logic;
                 q:out std_logic);
end component;
begin
    ff1:jk_ff port map(vcc,vcc,cl,rt,q0);
    ff2:jk_ff port map(vcc,vcc,not q0,rt,q1);
    ff3:jk_ff port map(vcc,vcc,not q1,rt,q2);
end structural;